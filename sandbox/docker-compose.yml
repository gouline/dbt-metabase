name: dbt-metabase-sandbox

services:
  postgres:
    image: postgres:16.4
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-}
      - POSTGRES_DB=${POSTGRES_DB:-}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - common
    volumes:
      - ./postgres-initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  metabase:
    image: metabase/metabase:v0.55.3
    environment:
      - MB_SETUP_TOKEN=${MB_SETUP_TOKEN:-}
      - MB_DB_FILE=/metabase-data/metabase.db
    ports:
      - ${MB_PORT}:3000
    networks:
      - common
    volumes:
      - ./metabase.db:/metabase-data/metabase.db
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  app:
    build:
      context: .
      additional_contexts:
        root: ..
    command: ${TARGET_COMMAND:-init}
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-}
      - POSTGRES_DB=${POSTGRES_DB:-}
      - POSTGRES_SCHEMA=${POSTGRES_SCHEMA:-}
      - POSTGRES_PORT=${POSTGRES_PORT:-}
      - POSTGRES_HOST=postgres
      - MB_SETUP_TOKEN=${MB_SETUP_TOKEN:-}
      - MB_USER=${MB_USER:-}
      - MB_PASSWORD=${MB_PASSWORD:-}
      - MB_PORT=${MB_PORT:-}
      - MB_HOST=metabase
      # Databricks environment variables (optional)
      - DATABRICKS_HOST=${DATABRICKS_HOST:-}
      - DATABRICKS_HTTP_PATH=${DATABRICKS_HTTP_PATH:-}
      - DATABRICKS_TOKEN=${DATABRICKS_TOKEN:-}
      - DATABRICKS_CATALOG=${DATABRICKS_CATALOG:-}
      - DATABRICKS_SCHEMA=${DATABRICKS_SCHEMA:-}
      - DATABRICKS_MB_DB_NAME=${DATABRICKS_MB_DB_NAME:-}
    networks:
      - common
    volumes:
      - .:/app/sandbox
    depends_on:
      postgres:
        condition: service_healthy
      metabase:
        condition: service_healthy

networks:
  common:
